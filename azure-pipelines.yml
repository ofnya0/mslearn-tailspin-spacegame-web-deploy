trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release'

schedules:
- cron: '0 3 * * *'
  displayName: Deploy every day at 3 A.M.
  branches:
    include:
    - release
  always: false

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-18.04' #Build machine (Agent) is running Ubuntu
      demands:
      - npm #npm is package name for Node.js

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '3.1.300'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    #Run npm install to install the Node.js packages as defined in package.json
    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    #Run node-sass to convert Sass (.scss) files to CSS(.css) files
    #The project usesnSass to make it easier to author Cascading Style Sheets (CSS) files
    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    #Run gulp to minify JavaScrit and CSS files
    - task: gulp@1
      displayName: 'Run gulp tasks'

    #Print build info to wwwroot directory to help QA identify the build
    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    #Run dotnet restore to restore or install the project's dependencies
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    #Run dotnet build to build the app
    #the pipeline translates this task to "dotnet build MyProject.csproj --no-restore --configuration Release"
    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

   # Run Unit tests
   # - task: DotNetCoreCLI@2
   #  displayName: 'Run unit tests - $(buildConfiguration'
   #   inputs:
   #     command: 'test'
   #     arguments: '--no-build --configuration $(buildConfiguration)'
   #     projects: '**/*.Tests.csproj'

    #Run dotnet publish to package the application's result (including its dependencies) 
    # into a folder as a .zip file
    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true
 
    #Publish the .zip file to Azure pipelines
    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

    #Runs the stage only when the previous stage succeeds and the current branch is release
    #This ensures that release features are deployed only to Dev
- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
    )
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameDev)' #uses AebAppNameDev varibale to deploy to app instance that's associated with Dev environment
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

  #This stage defines a condition that runs the stage only when the build reason equals Schedule.
  #If this condition is false the stage is skipped by prior stages continue to run
- stage: 'Test'
  displayName: 'Deploy to the test environment'
  dependsOn: Dev
  #condition: eq(varibales['Build.Reason'], 'Schedule')
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: test
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameTest)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip' 

 #Deploy to staging environment
- stage: 'Staging'
  displayName: 'Deploy to the staging environment'
  dependsOn: Test
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: staging
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameStaging)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'